<div class="room">
    <h1>
        Room: <%= roomname %>
    </h1>
    <div class="room-container">
        <div class="music">
            <div class="playlist">
                <% for (i in JSON.parse(songs)){ %>
                <div class="upnext song" id="<%= JSON.parse(songs)[i].name %>">
                    <img src="<%= JSON.parse(songs)[i].album_img %>" alt="" class="song-image">
                    <div class="details">
                        <div class="song-name">
                            <%= JSON.parse(songs)[i].name %>
                        </div>
                        <div class="artist-name">
                            <%= JSON.parse(songs)[i].artist %>
                        </div>
                    </div>
                </div>
                <% } %>
            </div>

            <div class="controls">
                <div class="control-buttons">
                    <button id="mute" onclick="UnMute()">Unmute</button>
                    <button id="suggestSong" onclick="future()">Suggest Song</button>
                </div>
            </div>
        </div>
        <div id="video-grid">
            <div class="participant">
                <div class="participant-details">
                    <h4 class="participant-name"><%= user.name %></h4>
                    <div class="mic"><img src="/mute.svg" alt=""></div>
                </div>
                <video></video>
            </div>
        </div>
    </div>
    <audio id="AudioController" controls>
        <source autoplay src="" type="audio/mpeg">
    </audio>
</div>
<script src="https://unpkg.com/peerjs@1.1.0/dist/peerjs.min.js"></script>
<script src="https://cdn.socket.io/4.5.3/socket.io.min.js"
    integrity="sha384-WPFUvHkB1aHA5TDSZi6xtDgkF0wXJcIIxXhC6h8OT8EH3fC5PWro5pWJ1THjcfEi" crossorigin="anonymous">
</script>

<style>
    .room {
        background-color: var(--black);
        color: var(--text);
        display: flex;
        flex-direction: column;
        overflow-x: hidden;
        min-height: 100vh;
    }

    .room h1 {
        color: var(--violet);
        text-align: center;
        padding: 20px;
    }

    .room-container {
        width: 100vw;
        display: flex;
        flex-direction: row;
    }


    #video-grid {
        width: 70vw;
        display: grid;
        grid-template-columns: repeat(auto-fill, 200px);
        grid-auto-rows: 250px;
        padding-bottom: 20px;
    }

    video {
        width: 150px;
        height: 150px;
        object-fit: cover;
        margin: 10px;
        background-color: var(--grey);
    }

    .participant {
        margin: 30px;
        background-color: var(--overlay-grey);
        width: 170px;
        height: 220px;
        border-radius: 10px;
    }

    .participant-name {
        margin: 15px 5px;
    }

    .participant-details {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-between;
        padding: 0 10px;
    }

    .mic img {
        width: 15px;
    }

    .music {
        width: 30vw;
    }

    .playlist {
        background-color: var(--overlay-grey);
        padding: 20px 30px;
        border-radius: 20px;
        margin: 0 40px;
        overflow-y: scroll;
        height: 50vh;
    }

    .playlist .song-image {
        width: 60px;
        height: 60px;
        border-radius: 20px;
    }

    .upnext {
        padding: 10px 0;
        border-bottom: 1px solid var(--text);
    }

    .song {
        display: flex;
        flex-direction: row;
        align-items: center;
        margin: 10px 0px;
    }

    .upnext .details {
        margin-left: 20px;
    }

    .current .details {
        text-align: center;
    }

    .details .song-name {
        color: var(--white);
    }

    .song-controls img {
        width: 20px;
        height: 20px;
        margin: 0px 8px;
    }

    .about {
        display: flex;
        flex-direction: row;
        align-items: center;
    }

    .song-timeline {
        height: 2px;
        width: 100%;
        background-color: var(--grey);
        margin: 10px 5px;
        border-radius: 1px;
    }

    .current {
        margin-bottom: 30px;
    }

    .controls {
        padding: 10px 30px;
        background-color: var(--overlay-grey);
        border-radius: 20px;
        margin: 20px 40px;
    }

    .controls input[type="range"] {
        -webkit-appearance: none !important;
        height: 10px;
        background: var(--text);
        border: none;
        outline: none;
        border-radius: 5px;
        margin: 15px 5px;
    }

    .controls input[type="range"]::-webkit-slider-thumb {
        -webkit-appearance: none !important;
        border-radius: 5px;
        width: 10px;
        height: 10px;
        background: var(--violet);
        cursor: pointer;
    }

    button {
        background-color: var(--violet);
        border: none;
        color: white;
        padding: 10px;
        text-align: center;
        border-radius: 10px;
        margin: 4px 2px;
        cursor: pointer;
        font-size: 15px;
    }

    .control-buttons {
        margin: 20px 10px;
    }

    audio {
        display: absolute;
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 2;
    }
</style>

<script>
    var songs = JSON.parse(JSON.stringify( <%- songs %> ))
    console.log(songs)
    var audio = document.getElementById("AudioController");
    var currentSong = 0;

    function playSong() {
        audio.src = '/song/play/' + songs[currentSong].name;
        audio.play();
        audio.addEventListener("ended", function () {
            nextSong();
        });

        //give outline to current song
        var song = document.getElementById(songs[currentSong].name);
        song.style.outline = "2px solid var(--violet)";

        //remove outline from previous song
        if (currentSong > 0) {
            var prevSong = document.getElementById(songs[currentSong - 1].name);
            prevSong.style.outline = "none";
        }
    }

    window.addEventListener("load", function () {
        playSong();
    });

    function nextSong() {
        currentSong++;
        if (currentSong >= songs.length) {
            currentSong = 0;
        }
        playSong();
    }
</script>

<script>
    var muted = true;
    var notyf = new Notyf();
    var stream; 
    function future() {
        notyf.error('This feature will be implemented in the future.');
    }
    var socket = io('<%= socketurl %>');
    const videoGrid = document.getElementById('video-grid')
    navigator.getUserMedia = (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia ||
        navigator.msGetUserMedia);

    const myPeer = new Peer("<%= user.id %>", {
        secure: true,
        host: 'exunpeer.herokuapp.com',
        port: 443
    })

    myPeer.on('open', id => {
        socket.emit('join-room', '<%= roomid %>', id)
    })

    const myVideo = document.createElement('video')
    myVideo.muted = true;

    const peers = {}
    navigator.mediaDevices.getUserMedia({
        audio: true,
        video: false
    }).then(s=>{
        stream = s;
    })

    myPeer.on('call', call => {
        call.answer(stream)
        const video = document.createElement('video')
        call.on('stream', (userVideoStream) => {
            addVideoStream(video, userVideoStream, call.peer)
        })
        call.on('close', () => {
            document.getElementById(call.peer).remove()
        })
    });

    socket.on('user-connected', userId => {
        connectToNewUser(userId, stream)
    })

    socket.on('user-disconnected', userId => {
        if (peers[userId]) peers[userId].close()
    })

    function connectToNewUser(userId, stream) {
        const call = myPeer.call(userId, stream)
        const video = document.createElement('video')
        call.on('stream', userVideoStream => {
            addVideoStream(video, userVideoStream, userId)
        })
        call.on('close', () => {
            document.getElementById(userId).remove()
        })

        peers[userId] = call
    }

    async function addVideoStream(video, stream, userId) {
        console.log(stream, video, userId)
        video.srcObject = stream
        video.addEventListener('loadedmetadata', () => {
            video.play()
        })
        var user = await fetch('/profile/' + userId).then(res => res.json())
        var videoContainer =
            `<div id='${userId}' class="participant"><div class="participant-details"><h4 class="participant-name">${user.user.name}</h4><div class="mic"><img src="/mute.svg" alt=""></div></div>${video.outerHTML}</div>`;
        videoGrid.innerHTML += videoContainer
    }

    function UnMute() {
        var button = document.getElementById('mute')
        if (muted) {
            muted = false;
            button.innerHTML = 'Mute'
            stream.getAudioTracks()[0].enabled = true;
        } else {
            muted = true;
            button.innerHTML = 'Unmute'
            stream.getAudioTracks()[0].enabled = false;
        }
    }
</script>

<!-- <%= (room.author+ user._id) %> -->

<% if (room.author == user._id){ %>
<script>
    //send socket io broadcast with current song and time every 5 seconds
    setInterval(function () {
        socket.emit('song', {
            song: songs[currentSong].name,
            time: audio.currentTime,
            paused: audio.paused
        });
        if (audio.currentTime == audio.duration) {
            nextSong();
        }
        console.log({
            song: songs[currentSong].name,
            time: audio.currentTime
        })
    }, 5000);
</script>
<% } else {%>
<script>
    var audio = document.getElementById("AudioController");
    socket.on('song', function (data) {
        console.log(data, audio.currentTime, audio.src, audio.currentTime < data.time + 2 || audio.currentTime >
            data.time - 2)

        audio.src = '/song/play/' + data.song;
        audio.currentTime = data.time;
        if (data.paused) {
            audio.pause();
        } else {
            audio.play();
        }
        audio.addEventListener("ended", function () {
            nextSong();
        });
    });
</script>
<% } %>