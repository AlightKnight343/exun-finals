<div>
    <div id="video-grid"></div>
</div>
<script src="https://unpkg.com/peerjs@1.1.0/dist/peerjs.min.js"></script>
<script src="https://cdn.socket.io/4.5.3/socket.io.min.js"
    integrity="sha384-WPFUvHkB1aHA5TDSZi6xtDgkF0wXJcIIxXhC6h8OT8EH3fC5PWro5pWJ1THjcfEi" crossorigin="anonymous">
</script>

<style>
    #video-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, 300px);
        grid-auto-rows: 300px;
    }

    video {
        width: 100px;
        height: 100px;
        object-fit: cover;
        background-color: aqua;
    }
</style>


<script>
    var socket = io('<%= socketurl %>');
    const videoGrid = document.getElementById('video-grid')
    navigator.getUserMedia = (navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia ||
        navigator.msGetUserMedia);

    const myPeer = new Peer("<%= user.id %>", {
        secure: true,
        host: 'exunpeer.herokuapp.com',
        port: 443
    })
    
    myPeer.on('open', id => {
        socket.emit('join-room', '<%= roomid %>', id)
    })

    const myVideo = document.createElement('video')
    const peers = {}
    navigator.mediaDevices.getUserMedia({
        audio: true,
        video: false
    }).then(stream => {
        myPeer.on('call', call => {
            call.answer(stream)
            const video = document.createElement('video')
            call.on('stream', userVideoStream => {
                addVideoStream(video, userVideoStream)
            })
        })

        socket.on('user-connected', userId => {
            connectToNewUser(userId, stream)
        })
    })

    socket.on('user-disconnected', userId => {
        if (peers[userId]) peers[userId].close()
    })

    myPeer.on('open', id => {
        socket.emit('join-room', "<%= roomid %>", id)
    })

    function connectToNewUser(userId, stream) {
        const call = myPeer.call(userId, stream)
        const video = document.createElement('video')
        call.on('stream', userVideoStream => {
            addVideoStream(video, userVideoStream)
        })
        call.on('close', () => {
            video.remove()
        })

        peers[userId] = call
    }

    function addVideoStream(video, stream) {
        video.srcObject = stream
        video.addEventListener('loadedmetadata', () => {
            video.play()
        })
        videoGrid.append(video)
    }
</script>